#!/usr/bin/env -S nix develop .#update -c bash

COMMIT="$1"
ROOT_DIR="$(pwd)"

git_push() {
    if [[ "$COMMIT" == "--commit" ]]; then
        (
            cd "$ROOT_DIR" || return
            git config --global user.name 'Updater'
            git config --global user.email 'robot@nowhere.invalid'
            git remote update

            alejandra .
            git add .

            git commit -m "$1"
            git push
        )
    else
        echo "$1"
    fi
}

updateNpmDepsHash() {
    file="$ROOT_DIR/pkgs/pcs-web-ui/npmDepsHash.nix"
    npm_hash="$(nix build .#pcs-web-ui |& sed -n 's/.*got: *//p')"

    if [[ "$npm_hash" != "" ]]; then
        {
            echo '# This file was autogenerated. DO NOT EDIT!'
            echo "\"$npm_hash\""
        } >"$file"

        echo "updated npmDepsHash"
    else
        echo "npmDepsHash is already up to date"
    fi
}

updateRubyDeps() {
    updateGems
    git_push "chore: update ruby deps"
}

getLatest() {
    type="$1"
    owner="$2"
    repo="$3"

    case "$type" in
        release)
            curl -s "https://api.github.com/repos/$owner/$repo/releases/latest" | jq -r .tag_name
        ;;

        prerelease)
            curl -s "https://api.github.com/repos/$owner/$repo/releases" |
                jq -r 'map(.tag_name)[]' |
                sort -r |
                head -n 1
        ;;
    esac
}

updatePackage() {
    nix flake update

    versionType="$1"
    owner="$2"
    repo="$3"
    file="$ROOT_DIR/pkgs/$repo/src.nix"

    current_version=$(nix eval --json --file "$file" | jq -r .rev)
    new_version=$(getLatest "$versionType" "$owner" "$repo")

    if [[ "$new_version" != "$current_version" ]]; then
        hash=$(nix-prefetch-github "$owner" "$repo" --rev "$new_version" |
            jq -r .hash)

        {
            echo '# This file was autogenerated. DO NOT EDIT!'
            echo '{'
            echo "  owner = \"$owner\";"
            echo "  repo = \"$repo\";"
            echo "  rev = \"$new_version\";"
            echo "  hash = \"$hash\";"
            echo '}'
        } >"$file"

        # Update third party sources
        if [[ "$repo" == "pcs-web-ui" ]]; then
            updateNpmDepsHash
        fi

        git_push "ci: $repo $current_version -> $new_version"
    else
        echo "$repo is already up to date"
    fi
}

updateRubyDeps
updatePackage "release" "ClusterLabs" "pacemaker"
updatePackage "release" "ClusterLabs" "pcs-web-ui"
updatePackage "release" "ClusterLabs" "resource-agents"
updatePackage "prerelease" "ClusterLabs" "pcs" # TODO: move to release once 0.12 comes out
